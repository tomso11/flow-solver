package tpe;

import java.awt.Point;
import java.util.HashSet;
import java.util.Set;

public class ExactMethod {
	
	private class SolutionsClass{

		Set<Tablero> solutions;
		Tablero bestSolution;
		
		public SolutionsClass(Set<Tablero> solutions, Tablero bestSolution){
			this.solutions = solutions;
			this.bestSolution = bestSolution;
			
		public SolutionsClass(){
			this.solutions = null;
			this.bestSolution = null;	
			
		}

		public Set<Tablero> getSolutions() {
			return solutions;
		}

		public void setSolutions(Set<Tablero> solutions) {
			this.solutions = solutions;
		}

		public Tablero getBestSolution() {
			return bestSolution;
		}

		public void setBestSolution(Tablero bestSolution) {
			this.bestSolution = bestSolution;
		}

	}
	
	public boolean ExactMethod(Tablero tab, boolean print){
		long time = System.currentTimeMillis();
		Set<Tablero> sols = new HashSet<Tablero>();
		soluciones.add(tab);
		SolutionsClass soluciones = new SolutionsClass(sols,tab);
		Point[] sink = tab.getSinks();

		
		for (int i = 0 ; i < tab.getCantColores(); i+2 ){
			for (Tablero each: soluciones){
				soluciones = findPath(each, sink[i], sink[i+1],colour[i/2]);
			}
		}
		
		for ( int j = 0 ; j < tab.getFils(); j++ ){
				System.out.println(soluciones.getBestSolution()[j]);
		}
		
		time = System.currentTimeMillis() - time;
		System.out.println("El algoritmo encontro la solucion exacta en " + time + " segundos.");
	}

	public SolutionsClass findPath(Tablero tablero,Point origin, Point destiny, int colour){
		Set<Tablero> sols = new HashSet<Tablero>();
		SolutionsClass solutions = new SolutionsClass();
				
		if (origin == destiny){
			sols.add(Tablero);
			solutions.add(sols);
			return solutions;
		}
			
		Point point = new Point((int)origin.getX()-1,(int)origin.getY());
		if( tablero.isFree(point) ){
			tablero.paint(point,colour);
			solutions.add(findPath(tablero,point,destiny,colour));
		}
		
		point = new Point((int)origin.getX(),(int)origin.getY()-1);
		if( tablero.isFree(point) ){
			tablero.paint(point,colour);
			solutions.add(findPath(tablero,point,destiny,colour));
		}
		
		point = new Point((int)origin.getX()+1,(int)origin.getY());
		if( tablero.isFree(point) ){
			tablero.paint(point,colour);
			solutions.add(findPath(tablero,point,destiny,colour));
		}
		
		point = new Point((int)origin.getX(),(int)origin.getY()+1);
		if( tablero.isFree(point) ){
			tablero.paint(point,colour);
			solutions.add(findPath(tablero,point,destiny,colour));
		}
	}
	
	
	
	
}
